{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/removing-an-element-from-list/","webpackCompilationHash":"601827e35bacedba0b4e","result":{"data":{"markdownRemark":{"id":"3c360505-7f45-5e56-ae59-7a910ee83ff2","html":"<figure>\n    <img src=\"/media/20190805-photo1.jpeg\" alt=\"unsplash-film\">\n    <!-- <figcaption>Splendid</figcaption> -->\n</figure>\n<p>First and foremost, let’s write a function to remove odd numbers from a list.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">remove_odd_numbers</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \tremove_odd_numbers</code></pre></div>\n<p>What kinds of methods did you use to solve it? remove method or del method?? Didn’t you use <code class=\"language-text\">for loop</code> while using them?</p>\n<p>Did you get it right? If not, ponder why you get an incorrect answer?</p>\n<h2 id=\"for-loop\"><a href=\"#for-loop\" aria-label=\"for loop permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>For loop</h2>\n<p>You should think twice when removing items from a list while iterating over it. When you remove items from a list, then the index position of each item is constantly changing and their turns can be skipped.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">    <span class=\"token keyword\">def</span> <span class=\"token function\">remove_odd_numbers</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \t<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> n<span class=\"token punctuation\">:</span>\n    \t\t<span class=\"token keyword\">if</span> i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n    \t\t\tn<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n       <span class=\"token keyword\">print</span> n\n       <span class=\"token keyword\">return</span> n\n\n    <span class=\"token comment\"># a = remove_odd_numbers([1,2,3,4,5,6,7,8,9,10,11])</span>\n    <span class=\"token comment\"># print(a)</span>\n    <span class=\"token comment\"># result: [2, 4, 6, 8, 10]</span></code></pre></div>\n<p>Still confused? Let me show you the same for loop with <code class=\"language-text\">index</code> added.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">    <span class=\"token keyword\">def</span> <span class=\"token function\">remove_odd_numbers</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> index<span class=\"token punctuation\">,</span>value <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> value <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n                n<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n\n    <span class=\"token triple-quoted-string string\">'''Result:\n    Index : 0\n    Value : 1\n    a List after removing one item: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    Index :1\n    Value :3\n    [2, 4, 5, 6, 7, 8, 9, 10, 11]\n    Index :2\n    Value :5\n    [2, 4, 6, 7, 8, 9, 10, 11]\n    Index :3\n    Value :7\n    [2, 4, 6, 8, 9, 10, 11]\n    Index :4\n    Value :9\n    [2, 4, 6, 8, 10, 11]\n    Index :5\n    Value :11\n    [2, 4, 6, 8, 10]\n    [2, 4, 6, 8, 10]\n    '''</span></code></pre></div>\n<p>Did you catch the difference? While the list is iterated, some of the items are just skipped, because of different positions. To avoid this, what you need to is to make a shallow copy of list.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">    <span class=\"token keyword\">def</span> <span class=\"token function\">remove_odd_numbers</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> value <span class=\"token keyword\">in</span> n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> value <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n                n<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">#result: [2, 4, 6, 8, 10] // all the odd numbers are removed</span></code></pre></div>\n<p>Shallow Copy &#x26; and Deep Copy</p>\n<h3 id=\"n-is-a-shallow-copy-of-list-n\"><a href=\"#n-is-a-shallow-copy-of-list-n\" aria-label=\"n is a shallow copy of list n permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">n[:] is a shallow copy of list n.</code></h3>\n<p>In other words, thanks to <code class=\"language-text\">n[:]</code>, the index of <code class=\"language-text\">for loop</code> starts with <strong>zero.</strong> So every time the list of n is iterated, it will spit out zero, allowing every item to be passed in if statement. ****</p>\n<p>However, the better way to remove an item from a list is to use <strong><code class=\"language-text\">filter method.</code></strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">    <span class=\"token keyword\">def</span> <span class=\"token function\">remove_odd_numbers</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> x <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span>\n\n    a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span>\n    n <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>remove_odd_numbers<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">#result:</span>\n    <span class=\"token comment\">#[2, 4, 6, 8, 10]</span></code></pre></div>\n<h3 id=\"instead-you-can-make-use-of-lambda-expression\"><a href=\"#instead-you-can-make-use-of-lambda-expression\" aria-label=\"instead you can make use of lambda expression permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Instead, you can make use of lambda expression.</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">    a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span>\n    n<span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">#result:</span>\n    <span class=\"token comment\">#[2, 4, 6, 8, 10]</span></code></pre></div>\n<hr>\n<blockquote>\n<p><strong>We are creating wealth every time we write a code</strong></p>\n</blockquote>","fields":{"slug":"/posts/removing-an-element-from-list/","tagSlugs":["/tag/python/","/tag/for-loop/","/tag/shallow-copy/","/tag/deep-copy/"]},"frontmatter":{"date":"2019-08-04T14:23:38.199Z","description":"You should think twice when removing items from a list while iterating over it","tags":["Python","For Loop","Shallow Copy","Deep Copy"],"title":"[PY]Removing an element from List"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/removing-an-element-from-list/"}}}